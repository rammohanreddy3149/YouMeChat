<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title><%= title %></title>
    
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/group.css">
    
</head>


<body>
    <%- include ../partials/navbar.ejs %>
    <style type="text/css">
        #container { position: relative; }
        #container{
          width: 1000px;
          height: 500px;
          background-color: #fff;
          border-radius: 5px;
        }
        body{
          background: rgb(55,55,55) !important;
        }
        #imageView { border: 1px solid #000; }
        #imageTemp { position: absolute; top: 1px; left: 1px; }
        canvas {
          border-radius: 5px;
          cursor: url(../img/pen.png), crosshair;
      }
      #text_tool {
      position: absolute;
      border: 1px dashed black;
      outline: 0;
      z-index:1000 !important;
      display: none;
      overflow: hidden;
      white-space: nowrap;
  }
  .container .btn.btn-sm{
      background: #06f;
      box-shadow: 0 3px 0 0 rgba(0, 0, 0, 0.5);
      color: #fff;
      outline: none;
      cursor: pointer;
      text-shadow: 0 1px #06f;
      display: inline-block;
      font-size: 16px;
      border: none;
      border-radius: 5px;
      padding: 5px 15px;
      margin-right: 5px;
  }
  .container .btn.btn-sm:active{
     background: #06f; 
  }
  label{
      color: #fff;
  }
      </style>
      <!-- Bootstrap -->
      <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet">
      
      </head>
      
      <body style="margin-top:30px;">
      <div class="container">
          <p style="">
          <button type="button" class="btn btn-warning btn-sm" value="pencil" id="pencil-button">Pencil</button>
          <button type="button" class="btn btn-warning btn-sm" value="rect" id="rect-button">Rectangle</button>
          <button type="button" class="btn btn-warning btn-sm" value="circle" id="circle-button">Circle</button>
          <button type="button" class="btn btn-warning btn-sm" value="ellipse" id="ellipse-button">Ellipse</button>
          <button type="button" class="btn btn-warning btn-sm" value="line" id="line-button">Line</button>
          <button type="button" class="btn btn-warning btn-sm" value="text" id="text-button">Text</button>
          <button type="button" class="btn btn-warning btn-sm" id="clear-all">Clear All</button>
          <label for="colour" style="position:absolute;">Colour : </label>
          <input id="colour-picker" value="#000000" style="width:80px;" class="jscolor {width:243, height:150, position:'right',
      borderColor:'#FFF', insetColor:'#FFF', backgroundColor:'#666'}">
          <!-- <span class="form-group" style="width: 100px;display: inline-block;">
                <label for="draw-grid">Grid: </label>
                <select class="form-control" id="draw-grid">
                  <option value="normal">Normal</option>
                  <option value="medium" selected>Medium</option>
                  <option value="large">Large</option>
                  <option value="nogrid">No Grid</option>
                </select>
          </span> -->
          <span class="form-group" style="width: 90px;display: inline-block;">
            <label for="line-Width">Thickness: </label>
            <select class="form-control" id="line-Width">
              <option>2</option>
              <option>4</option>
              <option>6</option>
              <option>8</option>
              <option>10</option>
              <option>12</option>
              <option>14</option>
            </select>
          </span>
           <span class="form-group" style="width: 130px;display: inline-block;">
            <label for="draw-text-font-family">Font: </label>
            <select class="form-control" id="draw-text-font-family">
              <option value="Arial">Arial</option>
              <option value="Verdana" selected>Verdana</option>
              <option value="Times New Roman">Times New Roman</option>
              <option value="Courier New">Courier New</option>
              <option value="serif">serif</option>
              <option value="sans-serif">sans-serif</option>
            </select>
          </span>
          <span class="form-group" style="width: 90px;display: inline-block;">
            <label for="draw-text-font-size">Font Size: </label>
            <select class="form-control" id="draw-text-font-size">
              <option value="16">16 Px</option>
              <option value="18">18 Px</option>
              <option value="20">20 Px</option>
              <option value="22">22 Px</option>
              <option value="24">24 Px</option>
              <option value="26">26 Px</option>
              <option value="28">28 Px</option>
              <option value="30">30 Px</option>
              <option value="32" selected>32 Px</option>
              <option value="34">34 Px</option>
              <option value="36">36 Px</option>
              <option value="38">38 Px</option>
              <option value="40">40 Px</option>
            </select>
          </span>
          </p>
  
          <div id="container">
            <canvas id="imageView" width="1000" height="500">
              <p>Unfortunately, your browser is currently unsupported by our web
              application.  We are sorry for the inconvenience. Please use one of the
              supported browsers listed below, or draw the image you want using an
              offline tool.</p>
              <p>Supported browsers: <a href="http://www.opera.com">Opera</a>, <a
                href="http://www.mozilla.com">Firefox</a>, <a
                href="http://www.apple.com/safari">Safari</a>, and <a
                href="http://www.konqueror.org">Konqueror</a>.</p>
            </canvas>
          </div>
      </div>
      
  <!-- Script files -->
          <script src='jquery.min.js'></script>
          <script src="bootstrap/js/bootstrap.min.js"></script>
          <script src="jscolor/jscolor.min.js"></script>
          <script src="/socket.io/socket.io.js"></script>
           
          <!-- <script src="canvas-backup-latest-v1.js"></script> -->
  
       <script type="text/javascript">
        $(document).ready(function(){
            var board_url = window.location.href;
            $('.linkToBoard').attr("href",board_url);
        });
      </script>

    <div class="col-md-12">
        
    <input type="hidden" id="name-user" value="<%= user.username %>">
    <input type="hidden" id="name-image" value="<%= user.userImage %>">

        <div class="col-md-12">
            <div class="chat_container">
                <div class="row">
                    
                    <div class="col-sm-4 col-md-3 mob-clearfix">
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="card-container">
                                    <div class="card">
                                        <div class="front">
                                            <div class="cover">

                                            </div>
                                            <div class="user cover-img">
                                                <img src="/profilepics/<%= user.userImage %>" class="img-circle" alt="">
                                            </div>
                                            <div class="content">
                                                <div class="main">
                                                    <h3 class="name"><%= _.upperFirst(user.username) %></h3>
                                                    <p class="profession-online">
                                                        <i class="fa fa-circle online" aria-hidden="true"></i>
                                                        Online
                                                    </p>
                                                    <p class="text-center">
                                                    	<%= user.bio %>
                                                    </p>
                                                </div>
                                                <div class="footer">
                                                    <i class="fa fa-mail-forward"></i> 
                                                    <a href="/settings/profile">
                                                      View My Profile
                                                    </a>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row" style="margin-top:10px;">
                            <div class="col-md-12">
                                <div class="card-container">
                                    <div class="card">
                                        <div class="front">

                                            <div class="content main-scroll">
                                                <div class="main" id="main_scroll">
                                                    <p class="friends" style="margin-bottom:0px;">
                                                        Online Friends <span id="numOfFriends"></span>
                                                    </p>
                                                    <hr style="margin-top:10px" />
                                                    <% if(data.friendsList.length > 0) { %>
                                                        <% _.forEach(data.friendsList, function(value){ %>

                                                            <div class="friend" hidden >@<%= value.friendName %></div>

                                                        <% }) %>
                                                    <% } %>
                                                    
                                                    <div class="onlineFriends"></div>

                                                </div>

                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                    
                    <div class="col-sm-5 col-md-6 message_section">
                        <div class="row">
                            <div class="new_message_head">
                                <div class="pull-left">
                                <button class="club_name">
                                  <%= groupName %>
                                </button>
                                </div>
                                <div class="pull-right">
                                </div>
                            </div>

                            <div class="chat_area">
                            <ul id ="messages" class="list-unstyled">
                                <% _.forEach(groupMsg, function(val) { %>
                                    <% if(groupName === val.name) { %>
                                <li class="left">
                                    <span class="chat-img1 pull-left">
                                        <img src="http://placehold.it/300x300" class="img-circle" alt="">
                                    </span>
                                    <div class="chat-body1">
                                        <span class="chat-name">
                                            <%= val.sender.username %>
                                        </span><br>
                                        <%= val.body %>
                                    </div>
                                </li>
                                <% }}) %>
                            </ul>
                            <script id="message-template" type="text/template">
                                <li class="left">
                                        <span class="chat-img1 pull-left">
                                            <img src="http://placehold.it/300x300" class="img-circle" alt="">
                                        </span>
                                        <div class="chat-body1">
                                            <span class="chat-name">
                                                {{sender}}
                                            </span><br>
                                           {{text}}
                                        </div>
                                    </li>
                            </script>
                            </div>

                            <div class="message_write">
                              <form action="#" id="message-form" method="post">
                                <input type="hidden" name="groupName" id="groupName" value= "<%= groupName %>">
                                <input type="hidden" id="sender" value="<%= user.username %>">
                                  <textarea class="form-control" name="message" id="msg" placeholder="Type a message"></textarea>
                                  <div class="clearfix"></div>
                                  <div class="chat_bottom">
                                      <button id="send-message" class="pull-right btn btn-primary" style="background: #4aa1f3; border: #4aa1f3; ">
                                          Send
                                      </button>
                                  </div>
                              </form>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3 col-md-3 mob-50 mob-clearfix">


                        <div class="new_message_head">
                            <div class="pull-left">
                                <button class="club_fans">
                                    <i class="fa fa-users" aria-hidden="true" style="padding-right:15px; color:#4aa1f3 !important;"></i>
                                    Online Club Members <span id="numValue"></span>
                                </button>
                            </div>
                        </div>



                        <div class="gr-rightsidebar">

                            <div id="myModal" class="modal fade" role="dialog">
                              <div class="modal-dialog">

                                <div class="modal-content">
                                  <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                    <h3 class="modal-title" id="name"></h3>
                                  </div>
                                  <div class="modal-body">
                                    <form action="" method="get" id="add_friend">
                                        <input type="hidden" name="rName" id="receiverName" value="">
                                        <input type="hidden" name="sender-name" id="sender-name" value="<%= user.username %>">
                                        <button type="submit" id="friend-add" class="btn add"><i class="fa fa-user"></i> Add Friend</button>
                                        
                                        <a id="nameLink" class="btn ">View Profile</a>

                                        <div id="myTest">
                                            
                                        </div>
                                    </form>
                                  </div>
                                  <div class="modal-footer">
                                    <button type="button" class="btn btn_close" data-dismiss="modal">Close</button>
                                  </div>
                                </div>

                              </div>
                            </div>

                            <div class="col-md-12"  id="main">
                                <div id="users"></div>
                                
                            </div>

                        </div>
                    </div>

                </div>

            </div>

        </div>
    </div>

<script>

'use strict';

(function() {

  var socket = io();
  // This object holds the implementation of each drawing tool.
  var tools = {};
  var textarea;
  var colorPicked;
  var lineWidthPicked;
  var SelectedFontFamily;
  var SelectedFontSize;
  
  
// Keep everything in anonymous function, called on window load.
if(window.addEventListener) {
window.addEventListener('load', function () {
  var canvas, context, canvaso, contexto;

  // The active tool instance.
  var tool;
  var tool_default = 'pencil';

  function init () {
    // Find the canvas element.
    canvaso = document.getElementById('imageView');
    if (!canvaso) {
      alert('Error: I cannot find the canvas element!');
      return;
    }

    if (!canvaso.getContext) {
      alert('Error: no canvas.getContext!');
      return;
    }

    // Get the 2D canvas context.
    contexto = canvaso.getContext('2d');
    if (!contexto) {
      alert('Error: failed to getContext!');
      return;
    }

    // Add the temporary canvas.
    var container = canvaso.parentNode;
    canvas = document.createElement('canvas');
    if (!canvas) {
      alert('Error: I cannot create a new canvas element!');
      return;
    }

    canvas.id     = 'imageTemp';
    canvas.width  = canvaso.width;
    canvas.height = canvaso.height;
    container.appendChild(canvas);

    context = canvas.getContext('2d');

    // Get the tool select input.
   // var tool_select = document.getElementById('dtool');
    var tool_select = document.getElementById('pencil-button');
   
    //tool_select.addEventListener('change', ev_tool_change, false);
    
    //Choose colour picker
    colorPicked = $("#colour-picker").val();
    
    $("#colour-picker").change(function(){
        colorPicked = $("#colour-picker").val();
    });
    
    //Choose line Width
    lineWidthPicked = $("#line-Width").val();
        
    $("#line-Width").change(function(){
        lineWidthPicked = $("#line-Width").val();
    });
    
    //SelectedFontFamily
    SelectedFontFamily = $("#draw-text-font-family").val();
    
    $("#draw-text-font-family").change(function(){
        SelectedFontFamily = $("#draw-text-font-family").val();
    })
    
    //SelectedFontSize
    SelectedFontSize = $("#draw-text-font-size").val();
    
    $("#draw-text-font-family").change(function(){
        SelectedFontSize = $("#draw-text-font-size").val();
    })
    

    // Activate the default tool.
    if (tools[tool_default]) {
      tool = new tools[tool_default]();
      tool_select.value = tool_default;
    }
    
    function pic_tool_click(pick){
        if (tools[pick.value]) {
          tool = new tools[pick.value]();
        }
    }
    
    $("#pencil-button").click(function(){
        pic_tool_click(this)
    });
    
    $("#rect-button").click(function(){
        pic_tool_click(this)
    });
    
     $("#circle-button").click(function(){
        pic_tool_click(this)
    });
    
    $("#ellipse-button").click(function(){
        pic_tool_click(this)
    });
    
    $("#line-button").click(function(){
        pic_tool_click(this)
    });
    
    $("#text-button").click(function(){
        pic_tool_click(this)
    });
    
    
    
    //Draw Grids
  function SketchGrid(gridSize) {
      context.clearRect(0, 0, canvas.width, canvas.height);
      
        var w = canvas.width;
        var h = canvas.height;
        var gridWidth, gridColor;
        
       
       if(gridSize == "normal"){
           gridWidth = 25;
           gridColor = "#e7e8e8";
       }else if(gridSize == "medium"){
           gridWidth = 45;
           gridColor = "#e7e8e8";
       }else if(gridSize == "large"){
           gridWidth = 65;
           gridColor = "#e7e8e8";
       }else if(gridSize == "nogrid"){
           gridWidth = 25;
           gridColor = "#fff";  //no grid
       }

       /**
         * i is used for both x and y to draw
         * a line every 5 pixels starting at
         * .5 to offset the canvas edges
         */
         
        context.beginPath();  //important draw new everytime
        
        for(var i = .5; i < w || i < h; i += gridWidth) {
            // draw horizontal lines
            context.moveTo( i, 0 );
            context.lineTo( i, h);
            // draw vertical lines
            context.moveTo( 0, i );
            context.lineTo( w, i);
        }
        context.strokeStyle = gridColor;
        //contexto.strokeStyle = 'hsla(0, 0%, 40%, .5)';
        context.stroke();

    }
    
    /*var SelectedGrid = $("#draw-grid").val();
    
    SketchGrid(SelectedGrid)  //Calling drawing grid fn
    
    $("#draw-grid").change(function(){
        var SelectedGrid = $("#draw-grid").val();
        SketchGrid(SelectedGrid)  //Calling drawing grid fn
    });*/
    
    
      // limit the number of events per second
  function throttle(callback, delay) {
    var previousCall = new Date().getTime();
    return function() {
      var time = new Date().getTime();

      if ((time - previousCall) >= delay) {
        previousCall = time;
        callback.apply(null, arguments);
      }
    };
  }

    // Attach the mousedown, mousemove and mouseup event listeners.
    canvas.addEventListener('mousedown', ev_canvas, false);
    //canvas.addEventListener('mousemove', ev_canvas, false);
    canvas.addEventListener('mousemove', throttle(ev_canvas, 10), false);
    canvas.addEventListener('mouseup',   ev_canvas, false);
  }

  // The general-purpose event handler. This function just determines the mouse 
  // position relative to the canvas element.
  function ev_canvas (ev) {
      //console.log(ev)
      var CanvPos = canvas.getBoundingClientRect();  //Global Fix cursor position bug
    if (ev.clientX || ev.clientX == 0) { // Firefox
      //ev._x = ev.clientX;
      ev._x = ev.clientX - CanvPos.left;
     // ev._x = ev.layerX;
      //ev._y = ev.clientY;
      ev._y = ev.clientY - CanvPos.top;
      //ev._y = ev.layerY;
    } else if (ev.offsetX || ev.offsetX == 0) { // Opera
      //ev._x = ev.offsetX;
      //ev._y = ev.offsetY;
    }
    
    // Call the event handler of the tool.
    var func = tool[ev.type];
    if (func) {
      func(ev);
    }
    //Hide textbox if not equals to text tool

    
  }

  // The event handler for any changes made to the tool selector.
  function ev_tool_change (ev) {
    if (tools[this.value]) {
      tool = new tools[this.value]();
    }
  }
  
  
  // This function draws the #imageTemp canvas on top of #imageView, after which 
  // #imageTemp is cleared. This function is called each time when the user 
  // completes a drawing operation.
  function img_update(trans) {
		contexto.drawImage(canvas, 0, 0);
		context.clearRect(0, 0, canvas.width, canvas.height);
//        console.log(tool)
        if (!trans) { return; }

        socket.emit('copyCanvas', {
          transferCanvas: true,
          room:room
        });
  }
  
    function onCanvasTransfer(data){
            img_update();
    }
  
  socket.on('copyCanvas', onCanvasTransfer);

  

  // The drawing pencil.
  function drawPencil(x0, y0, x1, y1, color, linewidth, emit){
        context.beginPath();
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        if(color)
            context.strokeStyle = "#"+color;
        else
            context.strokeStyle = "#"+colorPicked; 
        if(linewidth)
            context.lineWidth = linewidth;
        else
            context.lineWidth = lineWidthPicked;
        context.stroke();
        context.closePath();

        if (!emit) { return; }
        var w = canvaso.width;
        var h = canvaso.height;

        socket.emit('drawing', {
          x0: x0 / w,
          y0: y0 / h,
          x1: x1 / w,
          y1: y1 / h,
          color: colorPicked,
          lineThickness: lineWidthPicked,
          //room:room
        });
    }
    
    function onDrawingEvent(data){
        var w = canvaso.width;
        var h = canvaso.height;
        drawPencil(data.x0 * w, data.y0 * h, data.x1 * w, data.y1 * h, data.color, data.lineThickness);
    }
    
    socket.on('drawing', onDrawingEvent);
  
  
  tools.pencil = function () {
    var tool = this;
    this.started = false;
    textarea.style.display = "none";
    textarea.style.value = "";

    // This is called when you start holding down the mouse button.
    // This starts the pencil drawing.
    this.mousedown = function (ev) {
        //context.beginPath();
        //context.moveTo(ev._x, ev._y);
        tool.started = true; 
        tool.x0 = ev._x;
        tool.y0 = ev._y;
    };

    // This function is called every time you move the mouse. Obviously, it only 
    // draws if the tool.started state is set to true (when you are holding down 
    // the mouse button).
    this.mousemove = function (ev) {
      if (tool.started) {
        drawPencil(tool.x0, tool.y0, ev._x, ev._y, colorPicked, lineWidthPicked, true);
        tool.x0 = ev._x;
        tool.y0 = ev._y;
      }
    };

    // This is called when you release the mouse button.
    this.mouseup = function (ev) {
      if (tool.started) {
        tool.mousemove(ev);
        tool.started = false;
        img_update(true);
      }
    };
  };
  
  //Rect
  function drawRect(min_x, min_y, abs_x, abs_y, color, linewidth, emit){
          
            context.clearRect(0, 0, canvas.width, canvas.height); 
        if(color)
            context.strokeStyle = "#"+color;
        else
            context.strokeStyle = "#"+colorPicked; 
        if(linewidth)
            context.lineWidth = linewidth;
        else
            context.lineWidth = lineWidthPicked;
            context.strokeRect(min_x, min_y, abs_x, abs_y);
            
            if (!emit) { return; }
            var w = canvaso.width;
            var h = canvaso.height;

            socket.emit('rectangle', {
              min_x: min_x / w,
              min_y: min_y / h,
              abs_x: abs_x / w,
              abs_y: abs_y / h,
              color: colorPicked,
              lineThickness: lineWidthPicked,
              //room:room
            });
        
    }
    
    function onDrawRect(data){
        var w = canvaso.width;
        var h = canvaso.height;
        console.log("IN")
        drawRect(data.min_x * w, data.min_y * h, data.abs_x * w, data.abs_y * h, data.color, data.lineThickness);
    }
    
    socket.on('rectangle', onDrawRect);


  // The rectangle tool.
  tools.rect = function () {
    var tool = this;
    this.started = false;
    textarea.style.display = "none";
    textarea.style.value = "";
    
   //above the tool function

    this.mousedown = function (ev) {
      tool.started = true;
      tool.x0 = ev._x;
      tool.y0 = ev._y;
    };

    this.mousemove = function (ev) {
      if (!tool.started) {
        return;
      }

      var pos_x = Math.min(ev._x,  tool.x0),
          pos_y = Math.min(ev._y,  tool.y0),
          pos_w = Math.abs(ev._x - tool.x0),
          pos_h = Math.abs(ev._y - tool.y0);

      context.clearRect(0, 0, canvas.width, canvas.height); //in drawRect

      if (!pos_w || !pos_h) {
        return;
      }
        //console.log("emitting")
      drawRect(pos_x, pos_y, pos_w, pos_h, colorPicked, lineWidthPicked, true);
      //context.strokeRect(x, y, w, h); // in drawRect
    };

    this.mouseup = function (ev) {
      if (tool.started) {
        tool.mousemove(ev);
        tool.started = false;
        img_update(true);
      }
    };
  };
  //Lines
   function drawLines(x0, y0, x1, y1, color, linewidth, emit){
          context.clearRect(0, 0, canvas.width, canvas.height); 
          context.beginPath();
          context.moveTo(x0, y0);
          context.lineTo(x1, y1);
          if(color)
            context.strokeStyle = "#"+color;
        else
            context.strokeStyle = "#"+colorPicked; 
         if(linewidth)
            context.lineWidth = linewidth;
        else
            context.lineWidth = lineWidthPicked;
          context.stroke();
          context.closePath();
          
            
            if (!emit) { return; }
            var w = canvaso.width;
            var h = canvaso.height;

            socket.emit('linedraw', {
              x0: x0 / w,
              y0: y0 / h,
              x1: x1 / w,
              y1: y1 / h,
              color: colorPicked,
              lineThickness: lineWidthPicked,
              //room:room
            });
        
    }
    
    function onDrawLines(data){
        var w = canvaso.width;
        var h = canvaso.height;
        drawLines(data.x0 * w, data.y0 * h, data.x1 * w, data.y1 * h, data.color, data.lineThickness);
    }
    
    socket.on('linedraw', onDrawLines);


  // The line tool.
  tools.line = function () {
    var tool = this;
    this.started = false;
    textarea.style.display = "none";
    textarea.style.value = "";
    
    
    this.mousedown = function (ev) {
      tool.started = true;
      tool.x0 = ev._x;
      tool.y0 = ev._y;
    };

    this.mousemove = function (ev) {
      if (!tool.started) {
        return;
      }
        drawLines(tool.x0, tool.y0, ev._x, ev._y, colorPicked, lineWidthPicked, true);

    };

    this.mouseup = function (ev) {
      if (tool.started) {
        tool.mousemove(ev);
        tool.started = false;
        img_update(true);
      }
    };
    
  };
  
  //The Circle tool
  
  //Old Circle Function
  function old_drawCircle(x1, y1, x2, y2, color, linewidth, emit){
       
            context.clearRect(0, 0, canvas.width, canvas.height); 
            
               var radiusX = (x2 - x1) * 0.5,
                radiusY = (y2 - y1) * 0.5,
                centerX = x1 + radiusX,
                centerY = y1 + radiusY,
                step = 0.01,
                a = step,
                pi2 = Math.PI * 2 - step;
            
            context.beginPath();
            context.moveTo(centerX + radiusX * Math.cos(0),
                       centerY + radiusY * Math.sin(0));

            for(; a < pi2; a += step) {
                context.lineTo(centerX + radiusX * Math.cos(a),
                           centerY + radiusY * Math.sin(a));
            }
            
            context.closePath();
        if(color)
            context.strokeStyle = "#"+color;
        else
            context.strokeStyle = "#"+colorPicked; 
        if(linewidth)
            context.lineWidth = linewidth;
        else
            context.lineWidth = lineWidthPicked;  
            context.stroke();
        
            
            if (!emit) { return; }
            var w = canvaso.width;
            var h = canvaso.height;

            socket.emit('circledraw', {
              x1: x1 / w,
              y1: y1 / h,
              x2: x2 / w,
              y2: y2 / h,
              color: colorPicked,
              lineThickness: lineWidthPicked,
              //room:room
            });
        
    }
  
  //New Circle Function
  function drawCircle(x1, y1, x2, y2, color, linewidth, emit){
      
      context.clearRect(0, 0, canvas.width, canvas.height); 
 
    var x = (x2 + x1) / 2;
    var y = (y2 + y1) / 2;
 
    var radius = Math.max(
        Math.abs(x2 - x1),
        Math.abs(y2 - y1)
    ) / 2;
 
    context.beginPath();
    context.arc(x, y, radius, 0, Math.PI*2, false);
    // context.arc(x, y, 5, 0, Math.PI*2, false);
     context.closePath();
        if(color)
            context.strokeStyle = "#"+color;
        else
            context.strokeStyle = "#"+colorPicked; 
        if(linewidth)
            context.lineWidth = linewidth;
        else
            context.lineWidth = lineWidthPicked;  
            context.stroke();
        
            
            if (!emit) { return; }
            var w = canvaso.width;
            var h = canvaso.height;

            socket.emit('circledraw', {
              x1: x1 / w,
              y1: y1 / h,
              x2: x2 / w,
              y2: y2 / h,
              color: colorPicked,
              lineThickness: lineWidthPicked,
              //room:room
            });
    
  }
  
   
    
    function onDrawCircle(data){
        var w = canvaso.width;
        var h = canvaso.height;
        drawCircle(data.x1 * w, data.y1 * h, data.x2 * w, data.y2 * h, data.color, data.lineThickness);
    }
    
    socket.on('circledraw', onDrawCircle);


  // The Circle tool.
  tools.circle = function () {
    var tool = this;
    this.started = false;
    textarea.style.display = "none";
    textarea.style.value = "";
    
    
    this.mousedown = function (ev) {
      tool.started = true;
      var rect = canvas.getBoundingClientRect();
      tool.x1 = ev.clientX - rect.left;
      tool.y1 = ev.clientY - rect.top;
    };

    this.mousemove = function (ev) {
      if (!tool.started) {
        return;
      }
      
      var rect = canvas.getBoundingClientRect();
        tool.x2 = ev.clientX - rect.left;
        tool.y2 = ev.clientY - rect.top;
    
        context.clearRect(0, 0, canvas.width, canvas.height); 
        drawCircle(tool.x1, tool.y1, tool.x2, tool.y2, colorPicked, lineWidthPicked, true);
        
        //context.strokeStyle = 'rgba(255, 0, 0, 0.5)'; //for old_drawCircle
        //context.strokeRect(x1, y1, x2-x1, y2-y1);

    };

    this.mouseup = function (ev) {
      if (tool.started) {
        tool.mousemove(ev);
        tool.started = false;
        img_update(true);
      }
    };
    
  };
  
  //Ellipse Tool 
  

  function drawEllipse(x, y, w, h, color, linewidth, emit){
      
      context.clearRect(0, 0, canvas.width, canvas.height); 
    var ox, oy, xe, ye, xm, ym;
    var kappa = .5522848;
      ox = (w / 2) * kappa, // control point offset horizontal
      oy = (h / 2) * kappa, // control point offset vertical
      xe = x + w,           // x-end
      ye = y + h,           // y-end
      xm = x + w / 2,       // x-middle
      ym = y + h / 2;       // y-middle
 
      context.beginPath();
      context.moveTo(x, ym);
      context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
      context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
      context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
      context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
      context.closePath();
    
        if(color)
            context.strokeStyle = "#"+color;
        else
            context.strokeStyle = "#"+colorPicked; 
        if(linewidth)
            context.lineWidth = linewidth;
        else
            context.lineWidth = lineWidthPicked;  
            context.stroke();
        
            
            if (!emit) { return; }
            var canv_w = canvaso.width;
            var canv_h = canvaso.height;

            socket.emit('ellipsedraw', {
              x: x,
              y: y,
              w: w,
              h: h,
              color: colorPicked,
              lineThickness: lineWidthPicked,
              //room:room
            });
    
  }
  
   
    
    function onDrawEllipse(data){
        var w = canvaso.width;
        var h = canvaso.height;
        drawEllipse(data.x, data.y, data.w, data.h, data.color, data.lineThickness);
    }
    
    socket.on('ellipsedraw', onDrawEllipse);


  // The Ellipse tool.
  tools.ellipse = function () {
    var tool = this;
    this.started = false;
    textarea.style.display = "none";
    textarea.style.value = "";
    
    
    this.mousedown = function (ev) {
      tool.started = true;
        tool.x0 = ev._x;
      tool.y0 = ev._y;
    };

    this.mousemove = function (ev) {
      if (!tool.started) {
        return;
      }
      
        var x = Math.min(ev._x, tool.x0);
		var y = Math.min(ev._y, tool.y0);
		
		var w = Math.abs(ev._x - tool.x0);
		var h = Math.abs(ev._y - tool.y0);
      
        context.clearRect(0, 0, canvas.width, canvas.height); 
        drawEllipse(x, y, w, h, colorPicked, lineWidthPicked, true);

    };

    this.mouseup = function (ev) {
      if (tool.started) {
        tool.mousemove(ev);
        tool.started = false;
        img_update(true);
      }
    };
    
  };
  
  
  
  
 //Text Tool start
 
textarea = document.createElement('textarea');
textarea.id = 'text_tool';
textarea.focus();
textarea.className += " form-control";
container.appendChild(textarea);

// Text tool's text container for calculating
// lines/chars
var tmp_txt_ctn = document.createElement('div');
tmp_txt_ctn.style.display = 'none';
container.appendChild(tmp_txt_ctn);


var onDrawTextBox = function(ev_x, ev_y, tool_x0, tool_y0) {
		
		 //context.clearRect(0, 0, canvas.width, canvas.height); 
      
        var x = Math.min(ev_x, tool_x0);
        var y = Math.min(ev_y, tool_y0);
        var width = Math.abs(ev_x - tool_x0);
        var height = Math.abs(ev_y - tool_y0);
         
        textarea.style.left = x + 'px';
        textarea.style.top = y + 'px';
        textarea.style.width = width + 'px';
        textarea.style.height = height + 'px';
         
        textarea.style.display = 'block';
	};
    
    
function DrawText(fsize, ffamily, colorVal, textPosLeft, textPosTop, processed_lines, emit){
        context.font = fsize + ' ' + ffamily;
        context.textBaseline = 'top';
        context.fillStyle = "#"+colorVal;
         
        for (var n = 0; n < processed_lines.length; n++) {
            var processed_line = processed_lines[n];
             
            context.fillText(
                processed_line,
                parseInt(textPosLeft),
                parseInt(textPosTop) + n*parseInt(fsize)
            );
        }
        
        img_update(); //Already emitting no need true param
        
        if (!emit) { return; }
            var w = canvaso.width;
            var h = canvaso.height;

            socket.emit('textdraw', {
              fsize: fsize,
              ffamily: ffamily,
              colorVal: colorVal,
              textPosLeft: textPosLeft,
              textPosTop: textPosTop,
              processed_linesArray: processed_lines,
              //room:room
            });
      
}

 function onTextDraw(data){
        var w = canvaso.width;
        var h = canvaso.height;
        DrawText(data.fsize, data.ffamily, data.colorVal, data.textPosLeft, data.textPosTop, data.processed_linesArray);
    }
    
    socket.on('textdraw', onTextDraw);
    


tools.text = function () {
    var tool = this;
    this.started = false;
    textarea.style.display = "none";
    textarea.style.value = "";
    
    this.mousedown = function (ev) {
      tool.started = true;
      tool.x0 = ev._x;
      tool.y0 = ev._y;
    
    };

    this.mousemove = function (ev) {
        if (!tool.started) {
        return;
      }
        
        var x = Math.min(ev._x, tool.x0);
        var y = Math.min(ev._y, tool.y0);
        var width = Math.abs(ev._x - tool.x0);
        var height = Math.abs(ev._y - tool.y0);
         
        textarea.style.left = x + 'px';
        textarea.style.top = y + 'px';
        textarea.style.width = width + 'px';
        textarea.style.height = height + 'px';
         
        textarea.style.display = 'block';
        textarea.style.color = "#"+colorPicked;
        textarea.style.font = SelectedFontSize+'px' + ' ' + SelectedFontFamily;
    };

    this.mouseup = function (ev) {
          if (tool.started) {
              
                //start      
                var lines = textarea.value.split('\n');
                var processed_lines = [];
                
                for (var i = 0; i < lines.length; i++) {
                    var chars = lines[i].length;
             
                        for (var j = 0; j < chars; j++) {
                            var text_node = document.createTextNode(lines[i][j]);
                            tmp_txt_ctn.appendChild(text_node);
                             
                            // Since tmp_txt_ctn is not taking any space
                            // in layout due to display: none, we gotta
                            // make it take some space, while keeping it
                            // hidden/invisible and then get dimensions
                            tmp_txt_ctn.style.position   = 'absolute';
                            tmp_txt_ctn.style.visibility = 'hidden';
                            tmp_txt_ctn.style.display    = 'block';
                             
                            var width = tmp_txt_ctn.offsetWidth;
                            var height = tmp_txt_ctn.offsetHeight;
                             
                            tmp_txt_ctn.style.position   = '';
                            tmp_txt_ctn.style.visibility = '';
                            tmp_txt_ctn.style.display    = 'none';
                             
                            // Logix
                             //console.log(width, parseInt(textarea.style.width));
                            if (width > parseInt(textarea.style.width)) {
                                break;
                            }
                        }
                     
                    processed_lines.push(tmp_txt_ctn.textContent);
                    tmp_txt_ctn.innerHTML = '';
                }
                
                /*var ta_comp_style = getComputedStyle(textarea);
                var fs = ta_comp_style.getPropertyValue('font-size');
                var ff = ta_comp_style.getPropertyValue('font-family');*/
                var fs = SelectedFontSize + "px";
                var ff = SelectedFontFamily;

                /*context.font = fs + ' ' + ff;
                context.textBaseline = 'top';
                context.fillStyle = "#"+colorPicked;
                 
                for (var n = 0; n < processed_lines.length; n++) {
                    var processed_line = processed_lines[n];
                     
                    context.fillText(
                        processed_line,
                        parseInt(textarea.style.left),
                        parseInt(textarea.style.top) + n*parseInt(fs)
                    );
                }
                
                img_update(); */
                
                DrawText(fs, ff, colorPicked, textarea.style.left, textarea.style.top, processed_lines, true)
                console.log("lines saved")
                textarea.style.display = 'none';
                textarea.value = '';
                          
            //end
                      
            tool.mousemove(ev);
            tool.started = false;
            
          }
    };
    
  };
  
  //Text tool end
  
  function clearAll_update(trans) {
    context.clearRect(0, 0, canvas.width, canvas.height);
    contexto.clearRect(0, 0, canvaso.width, canvaso.height);
      
        if (!trans) { return; }

        socket.emit('Clearboard', {
          CleardrawingBoard: true,
          //room:room
        });
  }
  
   function onClearAll(data){
            clearAll_update();
    }
  
  socket.on('Clearboard', onClearAll);

  
$("#clear-all").click(function(){
    context.clearRect(0, 0, canvas.width, canvas.height);
    contexto.clearRect(0, 0, canvaso.width, canvaso.height);
    clearAll_update(true)
});


  init();
  
    

}, false); }



//end


})();






</script>
<script src="/pub/bootstrap/js/bootstrap.js"></script>
<script src="/pub/bootstrap/js/bootstrap.min.js"></script>
<script src="/pub/jscolor/jscolor.js"></script>
<script src="/pub/jscolor/jscolor.min.js"></script>
<script src="/pub/text-tool.js"></script>
<script src="/pub/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>  
<script src="/socket.io/socket.io.js"></script>
<script src="/js/messagelink.js"></script>
<script src="/js/group/sendrequest.js"></script>
<script src="/js/group/groupchat.js"></script>
<script src="/js/global.js"></script>
<script src="/js/deparam.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.3.0/mustache.js"></script>
</body>

</html>